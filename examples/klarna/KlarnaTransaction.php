<?php
define('__GIROCHECKOUT_SDK_DEBUG__',true);

/**
 * Sample code for GiroCheckout integration of a klarna transaction
 *
 * @filesource
 * @package Samples
 * @version $Revision: 274 $ / $Date: 2019-09-06 14:04:44 -0400 (Fri, 06 Sep 2019) $
 */
require '../vendor/autoload.php';
use girosolution\GiroCheckout_SDK\GiroCheckout_SDK_Request;
use girosolution\GiroCheckout_SDK\helper\GiroCheckout_SDK_TransactionType_helper;

/**
 * Configuration of the merchants identifier, project and password
 * this information can be found in the GiroCockpit's project settings
 */
$merchantID = 0;        // Your merchant ID (Verkaufer-ID)
$projectID = 0;         // Your project ID (Projekt-ID)
$projectPassword = "";  // Your project password

/* Basket element is mandatory for Klarna transactions */
/* Sum of prices must match total amount. */
$basket = [
    "basket_id" => "basket".random_int(10000,999999), // Unique identifier for the basket
    "basket_type" => "PHYSICAL", // Type of basket: DIGITAL, PHYSICAL, or MIXED
    "basket_items" => [ // List of items in the basket
        [
            "name" => "Item 1", // Name of the item
            "quantity" => [
                "quantity_amount" => 3, // Amount of units
                "quantity_unit" => "pcs" // Unit of measurement
            ],
            "unit_price" => [
                "net" => 500, // Amount excluding tax (minor unit)
                "gross" => 600, // Amount including tax (minor unit)
                "currency" => "EUR", // ISO 4217 currency code
                "tax" => 2000 // Tax percentage (with two implied decimals, e.g., 20.00%)
            ]
        ]
    ]
];

/* init klarna transaction and parameters */
try {
  $request = new GiroCheckout_SDK_Request( GiroCheckout_SDK_TransactionType_helper::TRANS_TYPE_KLARNA_TRANSACTION );
  $request->setSecret($projectPassword);

  $request->addParam('merchantId',$merchantID)
        ->addParam('projectId',$projectID)
        ->addParam('merchantTxId',"txid" . random_int(10000,999999))
        ->addParam('amount',1800)
        ->addParam('currency','EUR')
        ->addParam('purpose','Klarna Test ' . random_int(100,999))
        ->addParam('urlRedirect','https://www.my-domain.de/girocheckout/redirect-creditcard')
        ->addParam('urlNotify','https://www.my-domain.de/girocheckout/redirect-creditcard')
        //->addParam('type', "AUTH" ) // Default is SALE
        //->addParam('locale', "en" ) // Default de
        ->addParam('email', "customer-email@example.com" )
        ->addParam('postalCode', "88888" )
        ->addParam('dateOfBirth', "1968-01-02" )
        ->addParam('anrede', "Herr" )
        ->addParam('firstName', "Max" )
        ->addParam('lastName', "Mustermann" )
        ->addParam('street', "Musterstr. 1" )
        ->addParam('city', "Musterort" )
        ->addParam('phone', "+49111111111" )
        ->addParam('gender', "MALE" )
        ->addParam('basket', json_encode($basket))

        //the hash field is auto generated by the SDK
        ->submit();

  //echo "<pre>";print_r($request->getResponseRaw());echo "</pre>";

  /* if transaction succeeded update your local system and redirect the customer */
  if($request->requestHasSucceeded()) {
        // rc is the response code
        $rc = $request->getResponseParam('rc');

        // This is how you can get the response parameters
        $request->getResponseParam('msg');
        $request->getResponseParam('reference');
        $request->getResponseParam('redirect');

        // Redirect the customer to the payment provider
        $request->redirectCustomerToPaymentProvider();
  }
  /* if the transaction did not succeed update your local system, get the responsecode and notify the customer */
  else {
        echo $request->getResponseParam('rc') . " " . $request->getResponseParam('msg') . "\n";
  }
}
catch (Exception $e) {
  echo "Exception: <br>";
  echo $e->getMessage();

  echo "<pre>";print_r($request->getResponseRaw());echo "</pre>";
}